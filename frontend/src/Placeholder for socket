// import packages
import React, { Component } from 'react'
import socketIOClient from 'socket.io-client'

// Making the App component
class App extends Component {
  constructor() {
    super()
    
    this.state = {
      endpoint: "http://localhost:3100" // this is where we are connecting to with sockets
    }
  }
  
  // method for emitting a socket.io event
  send = () => {
    const socket = socketIOClient(this.state.endpoint)
    
    // this emits an event to the socket (your server) with an argument of 'red'
    // you can make the argument any color you would like, or any kind of data you want to send.
    
    socket.emit('change color', 'red', 'yellow') 
    // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments
  }
  
  // render method that renders in code if the state is updated
  render() {
    // Within the render method, we will be checking for any sockets.
    // We do it in the render method because it is ran very often.
    const socket = socketIOClient(this.state.endpoint)
    
    // socket.on is another method that checks for incoming events from the server
    // This method is looking for the event 'change color'
    // socket.on takes a callback function for the first argument
    socket.on('change color', (color) => {
      // setting the color of our button
      document.body.style.backgroundColor = color
    })
     
    return (
      <div style={{ textAlign: "center" }}>
        <button onClick={() => this.send()}>Change Color</button>
      </div>
    )
  }
}

export default App



if (size) {
      return (
        <div className="chatroom-container">
          <div>
            <div className="username-header">
              {" "}
              <h4>{thread.username}</h4>
            </div>
            <div className="message-container">
              {dataOutput.map((e, i) => {
                return (
                  <div
                    style={{
                      float: i % 2 === 0 ? "left" : "right",
                      border: "1px solid black",
                      position: "static",
                      top: "0"
                    }}
                  >
                    <p>
                      {e.username}: {e.messages}
                    </p>
                  </div>
                );
              })}
            </div>
          </div>
          <div className="message-form">
            <input
              type="text"
              className="input-message"
              value={messageValue}
              name={"messageValue"}
              onChange={this.handleInput}
              placeholder="Send Message"
            />
            <button onClick={this.sendMessages}>Send</button>
          </div>
        </div>
      );
    } else {
      return <div>Hello</div>;
    }
  }