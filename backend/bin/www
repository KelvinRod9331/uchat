#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("backend:server");
var http = require("http");
var socket = require("socket.io");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3100");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Setting Up Socket
 */
var io = socket(server);
var clients = [];
var clientsObj = {}

io.on("connection", socket => {
  console.log("User connected", socket.id);

  socket.on("storeClientInfo", data => {
    console.log("Socket Client Data", data);

    if (clients.length !== 0) {
      clients.forEach((client, i) => {
        if (Number(client.userId) === Number(data.userId)) {
          clients.splice(i, 1);
        }
      });
    }
    var clientInfo = {
      username: data.username,
      userId: data.userId,
      connectionId: socket.id,
      language: data.language
    };

    clientsObj[data.userId] = clientInfo
    clients.push(clientInfo);
    console.log(clientsObj);
  });

  socket.on("chat", data => {
  
    io.sockets.emit("chat", {
          threadID: data.threadID
        });

  });

  socket.on("notify", data => {

    // io.to(clientsObj[data.receiver_id].connectionId).emit("chat", {
    //   threadID: data.threadID
    // });
 
      socket.broadcast.emit("notify", {
        type: data.action,
        username: data.username,
        image: data.image,
        message: data.messages
      });
  });

  socket.on("notification", data => {

    // io.to(clientsObj[data.receiver_id].connectionId).emit("chat", {
    //   threadID: data.threadID
    // });
 
      socket.broadcast.emit("notification", {
        type: data.type,
        userData: data.userData,
        message: data.messages
      });
  });

  socket.on("disconnect", () => {
    for (var i = 0, len = clients.length; i < len; ++i) {
      var c = clients[i];

      if (c.connectionId == socket.id) {
        clients.splice(i, 1);
        console.log("running?");
        return;
      }
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
