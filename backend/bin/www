#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var socket = require('socket.io');
var APIKey = require('../config')
var googleTranslate = require("google-translate")(
  APIKey.keys.googleTranslate
);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3100');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Setting Up Socket
 */
var io = socket(server)
var clients =[];

io.on('connection', socket => {
  console.log('User connected', socket.id)

  socket.on('storeClientInfo', (data) => {
    console.log("Socket Client Data", data)
    if(data.userId){
      var clientInfo = new Object();
        clientInfo.username = data.username;
        clientInfo.userId = data.userId;
        clientInfo.connectionId = socket.id;
        clientInfo.language = data.language;
        clients.push(clientInfo);
    }

    console.log(clients)
});

  socket.on("chat", data => {
    console.log('Chat Data', data)
   
      let user = clients.find(u => u.userId === data.receiver_id);
      console.log('User Receiving Message', user)
      googleTranslate.translate(data.messages, user.language, function(
        err,
        translation
      ) {

        socket.emit("chat", {
          threadID: data.threadID,
          sender_id: data.sender_id,
          receiver_id: data.receiver_id,
          username: data.username,
          translatedMessage: translation.translatedText,
          originalMessage: translation.originalText
        });

        // socket.to(user.connectionId).emit("chat", {
        //   threadID: data.threadID,
        //   sender_id: data.sender_id,
        //   receiver_id: data.receiver_id,
        //   username: data.username,
        //   translatedMessage: translation.translatedText,
        //   originalMessage: translation.originalText
        // });

      });
  });

  socket.on("disconnect", data => {
    for (var i = 0, len = clients.length; i < len; ++i) {
      var c = clients[i];

      if (c.connectionId == socket.id) {
        clients.splice(i, 1);
        console.log('running?')
        break;
      }
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
